import json
import requests
import datetime
import time
import random
import os

class ultraChatBot():    
    def __init__(self, json):
        self.json = json
        self.dict_messages = json['data']
        self.ultraAPIUrl = 'https://api.ultramsg.com/instance114147/'
        self.token = 'e9gigjx981vwnnzh'
        
        # Fichier pour sauvegarder les sessions
        self.sessions_file = 'user_sessions.json'
        self.user_sessions = self.load_sessions()
        
        # Syst√®me de d√©duplication des messages
        self.processed_messages_file = 'processed_messages.json'
        self.processed_messages = self.load_processed_messages()
        
        # Messages anti-spam
        self.anti_spam_messages = [
            "Merci de patienter üôè Votre demande est en cours de traitement.",
            "Plus vous envoyez de messages, plus le temps de traitement est rallong√©.",
            "Pas d'inqui√©tude, vous √™tes bien pris en charge.",
            "Nous traitons les demandes par ordre d'arriv√©e.",
            "Veuillez patienter, nous analysons votre demande."
        ]
        
        # Messages d'avertissement menu
        self.menu_warning_messages = {
            "first": "Veuillez r√©pondre √† partir du menu que je vous affiche. Tapez simplement le num√©ro de votre choix (1, 2, 3, 4, 5 ou 6).",
            "second": "Merci de r√©pondre √† partir du menu en tapant le num√©ro correspondant √† votre demande.",
            "final": "Ok, comme vous voulez. Si vous ne souhaitez pas coop√©rer, je reste en silence. Vous pourrez me reparler dans 2 heures ou taper 'menu' √† tout moment."
        }

    def load_processed_messages(self):
        try:
            if os.path.exists(self.processed_messages_file):
                with open(self.processed_messages_file, 'r', encoding='utf-8') as f:
                    messages = json.load(f)
                    current_time = time.time()
                    cleaned = {k: v for k, v in messages.items() if current_time - v < 86400}
                    if len(cleaned) != len(messages):
                        self.save_processed_messages(cleaned)
                    return cleaned
            return {}
        except Exception as e:
            print(f"‚ùå Erreur chargement messages trait√©s: {e}")
            return {}

    def save_processed_messages(self, messages=None):
        try:
            if messages is None:
                messages = self.processed_messages
            with open(self.processed_messages_file, 'w', encoding='utf-8') as f:
                json.dump(messages, f)
        except Exception as e:
            print(f"‚ùå Erreur sauvegarde messages trait√©s: {e}")

    def is_message_already_processed(self, message):
        message_id = message.get('id', '')
        if message_id and message_id in self.processed_messages:
            print(f"üîÑ Message d√©j√† trait√©: {message_id}")
            return True
        return False

    def mark_message_as_processed(self, message):
        message_id = message.get('id', '')
        if message_id:
            self.processed_messages[message_id] = time.time()
            self.save_processed_messages()

    def load_sessions(self):
        try:
            if os.path.exists(self.sessions_file):
                with open(self.sessions_file, 'r', encoding='utf-8') as f:
                    sessions = json.load(f)
                    print(f"‚úÖ Sessions charg√©es: {len(sessions)} utilisateurs")
                    return sessions
            else:
                print("üìù Nouveau fichier de sessions cr√©√©")
                return {}
        except Exception as e:
            print(f"‚ùå Erreur chargement sessions: {e}")
            return {}

    def save_sessions(self):
        try:
            with open(self.sessions_file, 'w', encoding='utf-8') as f:
                json.dump(self.user_sessions, f, ensure_ascii=False, indent=2)
            print(f"üíæ Sessions sauvegard√©es: {len(self.user_sessions)} utilisateurs")
        except Exception as e:
            print(f"‚ùå Erreur sauvegarde sessions: {e}")

    def send_requests(self, type, data):
        url = f"{self.ultraAPIUrl}{type}?token={self.token}"
        headers = {'Content-type': 'application/json'}
        answer = requests.post(url, data=json.dumps(data), headers=headers)
        return answer.json()

    def send_message(self, chatID, text):
        data = {"to": chatID, "body": text}  
        answer = self.send_requests('messages/chat', data)
        return answer

    def format_phone_number(self, whatsapp_id):
        if "@c.us" in whatsapp_id:
            clean_number = whatsapp_id.replace("@c.us", "")
            formatted_number = f"+{clean_number}"
            return formatted_number
        return whatsapp_id

    def send_to_sav(self, client_info, problem_type="general"):
        sav_destination = "120363366576958989@g.us"
        client_phone_raw = client_info.get('phone', 'Inconnu')
        client_phone_formatted = self.format_phone_number(client_phone_raw)
        
        if problem_type == "no_access":
            client_name = client_info.get('name', 'Non fourni')
            message = f"üö® CLIENT SANS ACCES\n\nNumero: {client_phone_formatted}\nNom: {client_name}\nProbleme: Commande payee mais acces non recu\nCapture: Re√ßue\n\n‚ö° A traiter rapidement SVP"
        elif problem_type == "technical":
            message = f"üîß PROBLEME TECHNIQUE\n\nNumero: {client_phone_formatted}\nProbleme: Dysfonctionnement signale\nCapture: Re√ßue\n\n‚ö° A resoudre rapidement SVP"
        elif problem_type == "conseiller_humain":
            message = f"üìû DEMANDE CONSEILLER\n\nNumero: {client_phone_formatted}\nDemande: Contact conseiller humain\n\n‚ö° A traiter rapidement SVP"
        else:
            message = f"‚ùì DEMANDE CLIENT\n\nNumero: {client_phone_formatted}\nType: {problem_type}\n\n‚ö° A traiter SVP"
        
        return self.send_message(sav_destination, message)

    def get_user_state(self, chatID):
        if chatID not in self.user_sessions:
            self.user_sessions[chatID] = {"state": "menu", "messages": [], "data": {}}
        return self.user_sessions[chatID]["state"]

    def set_user_state(self, chatID, state):
        if chatID not in self.user_sessions:
            self.user_sessions[chatID] = {"messages": [], "data": {}}
        self.user_sessions[chatID]["state"] = state
        self.save_sessions()

    def get_user_data(self, chatID, key, default=None):
        if chatID not in self.user_sessions:
            self.user_sessions[chatID] = {"state": "menu", "messages": [], "data": {}}
        return self.user_sessions[chatID]["data"].get(key, default)

    def set_user_data(self, chatID, key, value):
        if chatID not in self.user_sessions:
            self.user_sessions[chatID] = {"state": "menu", "messages": [], "data": {}}
        self.user_sessions[chatID]["data"][key] = value
        self.save_sessions()

    def activate_silence_mode(self, chatID, reason="sav_active"):
        self.set_user_state(chatID, "silence_mode")
        self.set_user_data(chatID, "silence_timestamp", time.time())
        self.set_user_data(chatID, "silence_reason", reason)
        print(f"üîá SILENCE ACTIV√â pour {chatID} - Raison: {reason}")

    def check_sav_message(self, message):
        """SIMPLE: D√©tecte si c'est un message du SAV"""
        message_body = message.get('body', '').lower()
        
        # Phrases qui indiquent que le SAV prend en charge
        sav_phrases = [
            "je prends votre demande en charge",
            "je prends votre demande",
            "je suis la sav qui vous prends en charge",
            "je suis le sav qui vous prend en charge"
        ]
        
        for phrase in sav_phrases:
            if phrase in message_body:
                client_id = message.get('to', '')
                if client_id:
                    print(f"üéØ SAV D√âTECT√â: Phrase '{phrase}' ‚Üí Client {client_id} mis en silence")
                    return client_id
        return None

    def get_main_menu(self):
        return """Bienvenue chez irabonnement.com üëã

Je suis l'assistant automatique con√ßu par DakarDev ü§ñ

Je suis encore en phase d'apprentissage, merci de votre compr√©hension üôè

Voici ce que je peux faire pour vous üëá :

1Ô∏è‚É£ Comment √ßa fonctionne ?
2Ô∏è‚É£ J'ai pass√© commande, je n'ai rien re√ßu
3Ô∏è‚É£ J'ai un probl√®me avec mon compte
4Ô∏è‚É£ Je veux me r√©abonner
5Ô∏è‚É£ Je veux acheter un abonnement
6Ô∏è‚É£ Contacter un conseiller humain"""

    def get_services_selection(self):
        return """Parfait üòä

Quel produit souhaitez-vous comprendre ? R√©pondez simplement avec le nom du produit parmi cette liste :

- Netflix
- Prime Video
- Disney+
- Crunchyroll
- IPTV
- Surfshark VPN
- NordVPN
- Carte Xbox
- Carte PSN
- HBO Max"""

    def get_service_info(self, service):
        service_lower = service.lower().strip()
        
        service_info = {
            "netflix": "üü• Netflix :\n\nüé¨ Netflix : √Ä partir de 2500F, vous cotisez pour un profil personnel, utilisable sur un seul appareil.\n\nUne fois votre commande pass√©e, vous recevez automatiquement vos acc√®s par mail et WhatsApp.",
            "prime video": "üü¶ Prime Video :\n\nüé• Prime Video : Service de streaming Amazon avec films et s√©ries exclusives.\n\nAcc√®s direct apr√®s commande, compatible tous appareils.",
            "prime": "üü¶ Prime Video :\n\nüé• Prime Video : Service de streaming Amazon avec films et s√©ries exclusives.\n\nAcc√®s direct apr√®s commande, compatible tous appareils.",
            "disney+": "üü¶ Disney+ :\n\nüé• Disney+ : Disponible uniquement via VPN.\n\nNous vous fournissons un compte Disney+ + un compte VPN.\n\n1Ô∏è‚É£ Connectez d'abord le VPN aux üá∫üá∏ USA (serveur Chicago)\n2Ô∏è‚É£ Ensuite, ouvrez l'application Disney+",
            "disney": "üü¶ Disney+ :\n\nüé• Disney+ : Disponible uniquement via VPN.\n\nNous vous fournissons un compte Disney+ + un compte VPN.\n\n1Ô∏è‚É£ Connectez d'abord le VPN aux üá∫üá∏ USA (serveur Chicago)\n2Ô∏è‚É£ Ensuite, ouvrez l'application Disney+",
            "crunchyroll": "üü† Crunchyroll :\n\nüéå Crunchyroll : La plateforme #1 pour les anim√©s et mangas.\n\nAcc√®s premium √† tous les contenus, sous-titres fran√ßais disponibles.",
            "iptv": "üü© IPTV :\n\nüì∫ IPTV : N√©cessite un VPN ou une configuration DNS.\n\nVoici les √©tapes :\n1Ô∏è‚É£ T√©l√©chargez une app OTT (ex : Smarters Player, Televizo, 9Xtream, Hot IPTV)\n2Ô∏è‚É£ Connectez un VPN (comme Surfshark) ou utilisez les DNS fournis apr√®s l'achat.",
            "surfshark vpn": "üîí Surfshark VPN :\n\nüõ°Ô∏è VPN premium pour s√©curiser votre connexion et acc√©der aux contenus g√©o-bloqu√©s.\n\nCompatible tous appareils, configuration simple.",
            "surfshark": "üîí Surfshark VPN :\n\nüõ°Ô∏è VPN premium pour s√©curiser votre connexion et acc√©der aux contenus g√©o-bloqu√©s.\n\nCompatible tous appareils, configuration simple.",
            "nordvpn": "üîµ NordVPN :\n\nüõ°Ô∏è VPN haut de gamme pour protection et acc√®s mondial.\n\nServeurs ultra-rapides, s√©curit√© maximale.",
            "nord vpn": "üîµ NordVPN :\n\nüõ°Ô∏è VPN haut de gamme pour protection et acc√®s mondial.\n\nServeurs ultra-rapides, s√©curit√© maximale.",
            "nord": "üîµ NordVPN :\n\nüõ°Ô∏è VPN haut de gamme pour protection et acc√®s mondial.\n\nServeurs ultra-rapides, s√©curit√© maximale.",
            "carte xbox": "üü¢ Carte Xbox :\n\nüéÆ Cartes cadeaux Xbox pour acheter jeux et contenus.\n\nLivraison imm√©diate du code de la carte.",
            "xbox": "üü¢ Carte Xbox :\n\nüéÆ Cartes cadeaux Xbox pour acheter jeux et contenus.\n\nLivraison imm√©diate du code de la carte.",
            "carte psn": "üîµ Carte PSN :\n\nüéÆ Cartes PlayStation Network pour le PlayStation Store.\n\nCodes livr√©s instantan√©ment apr√®s achat.",
            "psn": "üîµ Carte PSN :\n\nüéÆ Cartes PlayStation Network pour le PlayStation Store.\n\nCodes livr√©s instantan√©ment apr√®s achat.",
            "hbo max": "üü£ HBO Max :\n\nüé≠ HBO Max : S√©ries et films premium, contenu exclusif.\n\nAcc√®s complet √† la biblioth√®que HBO.",
            "hbo": "üü£ HBO Max :\n\nüé≠ HBO Max : S√©ries et films premium, contenu exclusif.\n\nAcc√®s complet √† la biblioth√®que HBO."
        }
        
        if service_lower in service_info:
            return service_info[service_lower]
        
        for key, value in service_info.items():
            if service_lower in key or key in service_lower:
                return value
        
        return "‚ùå Service non trouv√©. Veuillez taper exactement un nom de la liste."

    def is_image_message(self, message):
        return message.get('type') == 'image'

    def check_spam(self, chatID):
        current_time = time.time()
        
        if chatID not in self.user_sessions:
            self.user_sessions[chatID] = {"messages": [], "state": "menu", "data": {}}
        
        # Ajouter le message actuel
        self.user_sessions[chatID]["messages"].append(current_time)
        
        # Garder seulement les messages des 90 derni√®res secondes
        self.user_sessions[chatID]["messages"] = [
            msg_time for msg_time in self.user_sessions[chatID]["messages"] 
            if current_time - msg_time < 90
        ]
        
        message_count = len(self.user_sessions[chatID]["messages"])
        self.save_sessions()
        
        # Spam si 3+ messages en 90 secondes
        if message_count >= 3:
            return True
        return False

    def ProcessingŸÄincomingŸÄmessages(self):
        if self.dict_messages != []:
            message = self.dict_messages
            
            # V√©rification de d√©duplication
            if self.is_message_already_processed(message):
                return 'AlreadyProcessed'
            
            # Marquer le message comme trait√©
            self.mark_message_as_processed(message)
            
            # Ignorer les messages du groupe SAV
            sav_group_id = "120363366576958989@g.us"
            if message.get('from') == sav_group_id:
                return 'SAVGroupIgnored'
            
            # Ignorer nos propres messages automatiques
            if message.get('fromMe'):
                return 'FromMe'
            
            # PRIORIT√â #1: D√©tecter si le SAV prend en charge
            sav_client = self.check_sav_message(message)
            if sav_client:
                self.activate_silence_mode(sav_client, "sav_active")
                return 'SAVDetected'
            
            # Traitement des images et messages
            if self.is_image_message(message):
                chatID = message['from']
                message_body = "[IMAGE]"
                message_lower = "image"
            elif not message.get('body'):
                return 'EmptyMessage'
            else:
                chatID = message['from']
                message_body = message['body'].strip()
                message_lower = message_body.lower()
                
            print(f"üì± Message re√ßu de {chatID}: {message_body}")
            
            current_state = self.get_user_state(chatID)
            print(f"üîÑ √âtat actuel: {current_state}")
            
            # PRIORIT√â #2: V√©rifier si en mode silence
            if current_state == "silence_mode":
                silence_reason = self.get_user_data(chatID, "silence_reason", "unknown")
                print(f"üîá UTILISATEUR EN SILENCE ({silence_reason}) - AUCUNE R√âPONSE")
                return "SilenceMode"
            
            # PRIORIT√â #3: Commande "menu"
            if message_lower in ['menu', 'accueil', 'retour']:
                self.set_user_state(chatID, "menu")
                # Reset spam counter
                if chatID in self.user_sessions:
                    self.user_sessions[chatID]["messages"] = []
                return self.send_message(chatID, self.get_main_menu())
            
            # PRIORIT√â #4: R√©ponses simples
            if message_lower in ['merci', 'thank you', 'thanks']:
                return self.send_message(chatID, "Je vous en prie üòä")
            
            if message_lower in ['bonjour', 'bonsoir', 'salut', 'hello', 'hi']:
                return self.send_message(chatID, self.get_main_menu())
            
            # PRIORIT√â #5: Navigation selon l'√©tat
            if current_state == "menu":
                # Gestion des images non sollicit√©es
                if message_lower == "image":
                    return self.send_message(chatID, "Je n'ai pas besoin d'image pour le moment. üòä\n\nVeuillez choisir une option du menu en tapant le num√©ro (1, 2, 3, 4, 5 ou 6).")
                
                # Options du menu
                if message_lower == "1" or "comment √ßa fonctionne" in message_lower:
                    self.set_user_state(chatID, "services_selection")
                    return self.send_message(chatID, self.get_services_selection())
                    
                elif message_lower == "2" or "j'ai pass√© commande" in message_lower or "rien re√ßu" in message_lower:
                    return self.send_message(chatID, """Avant tout, veuillez v√©rifier votre bo√Æte mail et le num√©ro WhatsApp que vous avez fourni lors de l'abonnement.

Les informations de connexion sont automatiquement envoy√©es √† ces deux endroits.

Si vous ne trouvez rien, revenez ici et tapez '2' √† nouveau.""")
                    
                elif message_lower == "3" or "probl√®me avec mon compte" in message_lower:
                    self.set_user_state(chatID, "waiting_screenshot")
                    return self.send_message(chatID, """D√©sol√© pour le d√©sagr√©ment üò•

Pour mieux comprendre votre probl√®me, merci de nous envoyer une **capture d'√©cran** du message ou de l'erreur rencontr√©e.

Une fois re√ßu, nous le transmettrons au service technique.""")
                    
                elif message_lower == "4" or "r√©abonner" in message_lower or "reabonner" in message_lower:
                    return self.send_message(chatID, """Merci de vous rendre sur notre site : https://irabonnement.com

üëâ Si votre abonnement est expir√©, vous devrez commander un **nouveau compte**.""")
                    
                elif message_lower == "5" or "acheter un abonnement" in message_lower:
                    return self.send_message(chatID, """Parfait ‚úÖ

Vous pouvez commander directement sur : https://irabonnement.com

La livraison est automatique üì©""")
                    
                elif message_lower == "6" or "conseiller humain" in message_lower:
                    self.send_to_sav({"phone": chatID}, "conseiller_humain")
                    self.activate_silence_mode(chatID, "waiting_sav")
                    return self.send_message(chatID, """Votre demande a √©t√© transmise √† notre service client.

‚è≥ Un conseiller va vous r√©pondre dans un d√©lai estim√© de **moins de 40 minutes** (entre 10h et 22h).

Merci pour votre patience.""")
                
                # Si pas une r√©ponse valide du menu, v√©rifier spam puis avertissement
                else:
                    if self.check_spam(chatID):
                        spam_response = random.choice(self.anti_spam_messages)
                        return self.send_message(chatID, spam_response)
                    
                    # Avertissement menu seulement si pas de spam
                    warnings = self.get_user_data(chatID, "menu_warnings", 0)
                    if warnings == 0:
                        self.set_user_data(chatID, "menu_warnings", 1)
                        return self.send_message(chatID, f"{self.menu_warning_messages['first']}\n\n{self.get_main_menu()}")
                    elif warnings == 1:
                        self.set_user_data(chatID, "menu_warnings", 2)
                        return self.send_message(chatID, f"{self.menu_warning_messages['second']}\n\n{self.get_main_menu()}")
                    else:
                        self.activate_silence_mode(chatID, "non_cooperative")
                        return self.send_message(chatID, self.menu_warning_messages['final'])
                        
            elif current_state == "services_selection":
                service_info = self.get_service_info(message_lower)
                if "‚ùå Service non trouv√©" not in service_info:
                    self.set_user_state(chatID, "menu")
                    return self.send_message(chatID, service_info + "\n\nTapez 'menu' pour retourner au menu principal.")
                else:
                    return self.send_message(chatID, "‚ùå Service non trouv√©. " + self.get_services_selection())
                    
            elif current_state == "waiting_screenshot":
                if message_lower != "image":
                    return self.send_message(chatID, "Nous attendons une **capture d'√©cran** de votre probl√®me. Veuillez envoyer l'image.")
                
                self.send_to_sav({"phone": chatID, "problem": "Capture d'√©cran re√ßue"}, "technical")
                self.set_user_state(chatID, "transferred_to_sav")
                return self.send_message(chatID, """‚úÖ Merci ! Nous avons bien re√ßu votre capture d'√©cran.

üì§ Votre probl√®me a √©t√© transmis √† notre service technique.

‚è≥ Un agent vous r√©pondra sous peu (d√©lai moyen : moins de 40 minutes, entre 10h et 22h).""")
            
            # Message non reconnu
            self.set_user_state(chatID, "menu")
            return self.send_message(chatID, self.get_main_menu())
        
        return 'NoData'